// FirebaseSetup.ts
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
    apiKey: "AIzaSyDaLUX0xrk1hND1r3PJ1tiAzG80jmKAFYg",
    authDomain: "ming-527ed.firebaseapp.com",
    projectId: "ming-527ed",
    storageBucket: "ming-527ed.appspot.com",
    messagingSenderId: "78727120574",
    appId: "1:78727120574:web:95eed43cc7579dacdf80ef"
};

const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const firestore = getFirestore(app);

export { firestore };
import React, { forwardRef, Ref } from 'react';

const GraphContainer = forwardRef<HTMLDivElement>((props, ref) => {
    return <div ref={ref} style={{ width: '100%', height: '600px' }} {...props} />;
});


export default GraphContainer;// GraphTypes.ts
export interface GraphNode {
    id: string;
    name: string;
    color: string;
    average_toxicity_score: number; // Add this property
}


export interface GraphLink {
    source: string;
    target: string;
    strength: number;
    color: string;
}

export interface GraphData {
    nodes: GraphNode[];
    links: GraphLink[];
}

export interface TopicData {
    [key: string]: number | string | any;
}

export interface FirestoreData {
    [id: string]: TopicData;
}
import { firestore } from './FirebaseSetup';
import { collection, getDocs } from 'firebase/firestore';
import { scaleLinear } from 'd3-scale';
import { GraphData, GraphNode, GraphLink, FirestoreData } from './GraphTypes';

export const processFirebaseDataToGraph = (data: FirestoreData): GraphData => {
    let nodes: GraphNode[] = [];
    let links: GraphLink[] = [];

    const toxicityColorScale = scaleLinear<string>()
        .domain([0, 1]) // Assuming toxicity ranges from 0 to 1
        .range(['green', 'red']); // Green (non-toxic) to red (toxic)

    Object.entries(data).forEach(([topicId, topicData]) => {
        if (topicId === '-1') return;

        const topicName = topicData.topic_name || `Topic ${topicId}`;
        const averageToxicity = topicData.average_toxicity || 0;

        nodes.push({
            id: topicId,
            name: topicName,
            color: toxicityColorScale(averageToxicity),
            average_toxicity_score: averageToxicity, // Add the average_toxicity_score
        });

        // Process links between topics
        Object.entries(topicData).forEach(([key, value]) => {
            if (!isNaN(Number(key)) && key !== '-1' && key !== 'convosations') {
                const targetToxicity = data[key]?.average_toxicity || 0;
                const edgeColor = toxicityColorScale((averageToxicity + targetToxicity) / 2);

                links.push({
                    source: topicId, // Use the id of the source node
                    target: key, // Use the id of the target node
                    strength: typeof value === 'number' ? value : 0,
                    color: edgeColor,
                });
            }
        });
    });

    // Sort links by strength and keep only the top fraction (e.g., top 20%)
    links.sort((a, b) => b.strength - a.strength);
    links = links.slice(0, Math.ceil(links.length * 0.2));

    return { nodes, links };
};

const toggleNodeExpansion = async (
    nodeId: string,
    graphData: GraphData,
    setGraphData: (data: GraphData) => void,
    rawData: FirestoreData
) => {
    let newNodes = [...graphData.nodes];
    let newLinks = [...graphData.links];

    const isNodeExpanded = newNodes.some((node) => node.id.startsWith(`${nodeId}-conv`));

    if (!isNodeExpanded) {
        // Fetch conversation data only for the node being expanded
        const expandedData = await fetchAndProcessConversationData(nodeId, rawData);

        newNodes = [...newNodes, ...expandedData.newNodes];
        newLinks = [...newLinks, ...expandedData.newLinks];
    } else {
        // Collapse logic - Remove conversation nodes and links for the specific node
        newNodes = newNodes.filter((node) => !node.id.startsWith(`${nodeId}-conv`));
        newLinks = newLinks.filter(
            (link) =>
                !(typeof link.source === 'object' ? link.source : link.source).startsWith(`${nodeId}-conv`) &&
                !(typeof link.target === 'object' ? link.target : link.target).startsWith(`${nodeId}-conv`)
        );
    }

    setGraphData({ nodes: newNodes, links: newLinks });
};

async function fetchAndProcessConversationData(
    nodeId: string,
    rawData: FirestoreData
): Promise<{ newNodes: GraphNode[]; newLinks: GraphLink[] }> {
    let newNodes: GraphNode[] = [];
    let newLinks: GraphLink[] = [];

    // Fetch all conversations for the node
    const conversationSnapshot = await getDocs(collection(firestore, `topics1/${nodeId}/convosations`));

    // Prepare batch requests for speakers in each conversation
    const speakerRequests = conversationSnapshot.docs.map((doc) =>
        getDocs(collection(firestore, `topics1/${nodeId}/convosations/${doc.id}/speakers`))
    );

    // Execute all speaker requests in parallel
    const speakerSnapshots = await Promise.all(speakerRequests);

    speakerSnapshots.forEach((speakersSnapshot, index) => {
        const convId = conversationSnapshot.docs[index].id;
        const emotions = speakersSnapshot.docs.map((doc) => doc.data().emoji);
        const emotionLabel = emotions.join(' vs ');

        newNodes.push({
            id: `${nodeId}-conv-${convId}`,
            name: emotionLabel,
            color: 'white',
            average_toxicity_score: 0, // You can set this to a value if needed
        });

        // Assigning a default link strength, can be adjusted as needed
        newLinks.push({
            source: nodeId,
            target: `${nodeId}-conv-${convId}`,
            strength: 1,
            color: 'white',
        });
    });

    return { newNodes, newLinks };
}

export { toggleNodeExpansion, fetchAndProcessConversationData };
import { SpriteMaterial, CanvasTexture, Camera, Vector3 } from 'three';
import * as d3 from 'd3-scale';
import { GraphNode } from './GraphTypes';
import ForceGraph3D from "3d-force-graph";
import { MutableRefObject } from 'react';

// Define the toxicityColorScale using D3
const toxicityColorScale = d3.scaleLinear<string>()
    .domain([0, .35])
    .range(['green', 'red']);

export const createTextMaterial = (text: string, color: string, fontSize: string = '16px', fontFamily: string = 'Arial'): SpriteMaterial | undefined => {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    if (context) {
        context.font = `${fontSize} ${fontFamily}`;
        const textMetrics = context.measureText(text);

        // Adjust canvas size based on text size
        canvas.width = textMetrics.width + 10; // Add some padding
        canvas.height = parseInt(fontSize, 10) + 10; // Height based on font size plus padding
        context.fillStyle = color;
        context.font = `${fontSize} ${fontFamily}`; // Reset font after resizing canvas
        context.fillText(text, 5, parseInt(fontSize, 10)); // Start drawing from a small offset

        const texture = new CanvasTexture(canvas);
        return new SpriteMaterial({ 
            map: texture,
            transparent: true,
            opacity: 0.6
        });
    }
    return undefined;
};

export const createNodeMaterial = (node: GraphNode): SpriteMaterial | undefined => {
    const color = toxicityColorScale(node.average_toxicity_score); // Use average_toxicity_score
    return createTextMaterial(node.name, color);
};

export const focusCameraOnNode = (
    camera: Camera, 
    nodePosition: { x: number; y: number; z: number }, 
    duration: number = 2000,
    zoomDistance: number = 100
): void => {
    const startPosition = new Vector3().copy(camera.position);
    const targetPosition = new Vector3(nodePosition.x, nodePosition.y, nodePosition.z + zoomDistance);

    const startTime = Date.now();

    function animateCamera() {
        const elapsedTime = Date.now() - startTime;
        const fraction = elapsedTime / duration;

        if (fraction < 1) {
            camera.position.lerpVectors(startPosition, targetPosition, fraction);
            camera.lookAt(nodePosition.x, nodePosition.y, nodePosition.z);
            requestAnimationFrame(animateCamera);
        } else {
            camera.position.set(targetPosition.x, targetPosition.y, targetPosition.z);
            camera.lookAt(nodePosition.x, nodePosition.y, nodePosition.z);
        }
    }

    animateCamera();
};

// Function to create a spinning effect
export const spinGraph = (
    graph: typeof ForceGraph3D, 
    setIsNodeInteracted: MutableRefObject<boolean>
) => {
    let angle = 0;
    const rotationSpeed = 0.002; // Adjust as needed

    const rotate = () => {
        if (!setIsNodeInteracted.current) {
            angle += rotationSpeed;
            graph.cameraPosition(
                { x: 1000 * Math.sin(angle), y: 0, z: 1000 * Math.cos(angle) }, // Orbit radius
                undefined,
                2000
            );
        }
    };
    return setInterval(rotate, 100);
};

// Function to handle node hover for zooming
export const setupNodeHover = (
    graph: typeof ForceGraph3D, 
    setIsNodeInteracted: MutableRefObject<boolean>
) => {
    graph.onNodeHover((node: any) => { // 'any' can be replaced with a more specific type if available
        if (node) {
            setIsNodeInteracted.current = true;
            focusCameraOnNode(graph.camera(), node, 1000, 100); // Adjust duration and zoom distance as needed
        } else {
            setIsNodeInteracted.current = false;
        }
    });
};

// ... [any additional functions or exports]
import React, { useState, useEffect, useRef } from 'react';
import ForceGraph3D from "3d-force-graph"
import { Sprite } from 'three';
import { firestore } from './FirebaseSetup';
import { toggleNodeExpansion, processFirebaseDataToGraph } from './GraphUtilities';
import { createNodeMaterial, spinGraph, setupNodeHover } from './ThreeCustomElements';
import { getDocs, collection, QueryDocumentSnapshot } from 'firebase/firestore';
import { GraphData, TopicData, FirestoreData, GraphNode } from './GraphTypes';

interface TopicGraphProps {
    onFetchConversation: (conversation: { formattedText: string; plainText: string; json: any }) => void;
    onNodeClick: (nodeId: string) => void;
}

const TopicGraph: React.FC<TopicGraphProps> = ({ onFetchConversation, onNodeClick }) => {
    const graphRef = useRef<HTMLDivElement>(null);
    const [graphData, setGraphData] = useState<GraphData>({ nodes: [], links: [] });
    const [rawData, setRawData] = useState<FirestoreData>({});
    const isNodeInteracted = useRef(false);

    useEffect(() => {
        const fetchData = async () => {
            const querySnapshot = await getDocs(collection(firestore, "topics1"));
            let fetchedData: FirestoreData = {};
    
            querySnapshot.forEach((doc: QueryDocumentSnapshot<TopicData>) => {
                const topicId = doc.id;
                const topicData = doc.data();
                fetchedData[topicId] = topicData;
            });
    
            const processedGraphData = processFirebaseDataToGraph(fetchedData);
            setGraphData(processedGraphData);
            setRawData(fetchedData);
        };
    
        fetchData();
    }, []);

    useEffect(() => {
        if (!graphRef.current || !graphData) return;

        const graph = ForceGraph3D()(graphRef.current)
            .graphData(graphData)
            .nodeThreeObject(node => {
                const sprite = new Sprite(createNodeMaterial(node as GraphNode));
                sprite.scale.set(40, 20, 1);
                return sprite;
            })
            .linkColor(() => 'white')
            .onNodeClick((node: any) => {
                const graphNode = node as GraphNode;
                if (graphNode.id.includes('conv')) {
                    onNodeClick(graphNode.id);
                } else {
                    toggleNodeExpansion(graphNode.id, graphData, setGraphData, rawData);
                    isNodeInteracted.current = true;
                }
            });

        // Setup spinning and hover functionality
        const spinInterval = spinGraph(graph, isNodeInteracted);
        setupNodeHover(graph, isNodeInteracted);

        // Cleanup on component unmount
        return () => {
            clearInterval(spinInterval);
        };
    }, [graphData, onFetchConversation, onNodeClick]);

    return <div ref={graphRef} style={{ width: '100%', height: '100%', position: 'absolute' }} />;
};

export default TopicGraph;
