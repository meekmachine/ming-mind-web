// FirebaseSetup.ts
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
    apiKey: "AIzaSyDaLUX0xrk1hND1r3PJ1tiAzG80jmKAFYg",
    authDomain: "ming-527ed.firebaseapp.com",
    projectId: "ming-527ed",
    storageBucket: "ming-527ed.appspot.com",
    messagingSenderId: "78727120574",
    appId: "1:78727120574:web:95eed43cc7579dacdf80ef"
};

const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const firestore = getFirestore(app);

export { firestore };
import React, { forwardRef, Ref } from 'react';

const GraphContainer = forwardRef<HTMLDivElement>((props, ref) => {
    return <div ref={ref} style={{ width: '100%', height: '600px' }} {...props} />;
});


export default GraphContainer;export interface GraphNode {
    id: string;
    name: string;
    color: string;
    average_toxicity_score: number; 
    x: number;  // X-coordinate of the node
    y: number;  // Y-coordinate of the node
    z: number;  // Z-coordinate of the node
    // Add any other properties that GraphNode might have
}

export interface GraphLink {
    source: string;
    target: string;
    strength: number;
    color: string;
    // Add any other properties that GraphLink might have
}

export interface GraphData {
    nodes: GraphNode[];
    links: GraphLink[];
}

export interface TopicData {
    [key: string]: number | string | any;
}

export interface FirestoreData {
    [id: string]: TopicData;
}
import { firestore } from './FirebaseSetup';
import { collection, getDocs } from 'firebase/firestore';
import { scaleLinear } from 'd3-scale';
import { GraphData, GraphNode, GraphLink, FirestoreData } from './GraphTypes';

const processFirebaseDataToGraph = (data: FirestoreData): GraphData => {
    let nodes: GraphNode[] = [];
    let links: GraphLink[] = [];

    const toxicityColorScale = scaleLinear<string>()
        .domain([0, 1]) // Assuming toxicity ranges from 0 to 1
        .range(['green', 'red']); // Green (non-toxic) to red (toxic)

    // Example positioning logic (modify as needed)
    let positionIndex = 0;
    const positionStep = 50;

    Object.entries(data).forEach(([topicId, topicData]) => {
        if (topicId === '-1') return;

        const topicName = topicData.topic_name || `Topic ${topicId}`;
        const averageToxicity = topicData.average_toxicity || 0;

        // Assign positions (for example in a line or grid)
        const x = positionIndex * positionStep;
        const y = 0; // Adjust as needed
        const z = 0; // Adjust as needed
        positionIndex++;

        nodes.push({
            id: topicId,
            name: topicName,
            color: toxicityColorScale(averageToxicity),
            average_toxicity_score: averageToxicity,
            x: x,
            y: y,
            z: z,
        });

        // Process links between topics
        Object.entries(topicData).forEach(([key, value]) => {
            if (!isNaN(Number(key)) && key !== '-1' && key !== 'convosations') {
                const targetToxicity = data[key]?.average_toxicity || 0;
                const edgeColor = toxicityColorScale((averageToxicity + targetToxicity) / 2);

                links.push({
                    source: topicId,
                    target: key,
                    strength: typeof value === 'number' ? value : 0,
                    color: edgeColor,
                });
            }
        });
    });

    // Sort links by strength and keep only the top fraction (e.g., top 20%)
    links.sort((a, b) => b.strength - a.strength);
    links = links.slice(0, Math.ceil(links.length * 0.2));

    return { nodes, links };
};

const toggleNodeExpansion = async (
    nodeId: string,
    graphData: GraphData,
    setGraphData: (data: GraphData) => void,
    rawData: FirestoreData
) => {
    let newNodes = [...graphData.nodes];
    let newLinks = [...graphData.links];

    const isNodeExpanded = newNodes.some((node) => node.id.startsWith(`${nodeId}-conv`));

    if (!isNodeExpanded) {
        // Fetch conversation data only for the node being expanded
        const expandedData = await fetchAndProcessConversationData(nodeId, rawData);

        newNodes = [...newNodes, ...expandedData.newNodes];
        newLinks = [...newLinks, ...expandedData.newLinks];
    } else {
        // Collapse logic - Remove conversation nodes and links for the specific node
        newNodes = newNodes.filter((node) => !node.id.startsWith(`${nodeId}-conv`));
        newLinks = newLinks.filter(
            (link) =>
                !(typeof link.source === 'object' ? link.source : link.source).startsWith(`${nodeId}-conv`) &&
                !(typeof link.target === 'object' ? link.target : link.target).startsWith(`${nodeId}-conv`)
        );
    }

    setGraphData({ nodes: newNodes, links: newLinks });
};

async function fetchAndProcessConversationData(
    nodeId: string,
    rawData: FirestoreData
): Promise<{ newNodes: GraphNode[]; newLinks: GraphLink[] }> {
    // Implementation of fetching and processing conversation data
    // ...
    return { newNodes: [], newLinks: [] };
}

export { toggleNodeExpansion, processFirebaseDataToGraph };
import * as THREE from 'three';
import { MutableRefObject } from 'react';
import { GraphNode } from './GraphTypes';
import * as d3 from 'd3-scale';

const toxicityColorScale = d3.scaleLinear<string>()
    .domain([0, 0.35])
    .range(['green', 'red']);

export const createTextMaterial = (text: string, color: string, fontSize: string = '16px', fontFamily: string = 'Arial'): THREE.SpriteMaterial | undefined => {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    if (context) {
        context.font = `${fontSize} ${fontFamily}`;
        const textMetrics = context.measureText(text);

        canvas.width = textMetrics.width + 10; // Add some padding
        canvas.height = parseInt(fontSize, 10) + 10; // Height based on font size plus padding
        context.fillStyle = color;
        context.font = `${fontSize} ${fontFamily}`; // Reset font after resizing canvas
        context.fillText(text, 5, parseInt(fontSize, 10)); // Start drawing from a small offset

        const texture = new THREE.CanvasTexture(canvas);
        return new THREE.SpriteMaterial({ 
            map: texture,
            transparent: true,
            opacity: 0.6
        });
    }
    return undefined;
};

export const createNodeMaterial = (node: GraphNode): THREE.SpriteMaterial | undefined => {
    const color = toxicityColorScale(node.average_toxicity_score); // Use average_toxicity_score
    return createTextMaterial(node.name, color);
};

export const focusCameraOnNode = (
    camera: THREE.Camera, 
    nodePosition: { x: number; y: number; z: number }, 
    duration: number = 2000,
    zoomDistance: number = 100
): void => {
    const startPosition = new THREE.Vector3().copy(camera.position);
    const targetPosition = new THREE.Vector3(nodePosition.x, nodePosition.y, nodePosition.z + zoomDistance);

    const startTime = Date.now();

    function animateCamera() {
        const elapsedTime = Date.now() - startTime;
        const fraction = elapsedTime / duration;

        if (fraction < 1 && camera) {
            camera.position.lerpVectors(startPosition, targetPosition, fraction);
            camera.lookAt(nodePosition.x, nodePosition.y, nodePosition.z);
            requestAnimationFrame(animateCamera);
        } else {
            camera.position.set(targetPosition.x, targetPosition.y, targetPosition.z);
            camera.lookAt(nodePosition.x, nodePosition.y, nodePosition.z);
        }
    }

    animateCamera();
};


    export const spinGraph = (
        graph: any,  // Using 'any' to bypass TypeScript checks for 3D force graph
        setIsNodeInteracted: MutableRefObject<boolean>
    ) => {
        let angle = 0;
        const rotationSpeed = 0.002;
    
        const rotate = () => {
            if (!setIsNodeInteracted.current && graph.camera && graph.camera.position) {
                angle += rotationSpeed;
                const camera = graph.camera as any;
    
                // Adjust the radius and height as needed
                const radius = 1000;
                const height = 500;
    
                camera.position.x = radius * Math.sin(angle);
                camera.position.z = radius * Math.cos(angle);
                camera.position.y = height;
    
                camera.lookAt(new THREE.Vector3(0, 0, 0));
                if (graph.renderer) {
                    graph.renderer().render(graph.scene(), camera);
                }
            }
        };
    
        return setInterval(rotate, 100);
    };import React, { useState, useEffect, useRef } from 'react';
import ForceGraph3D from "3d-force-graph";
import * as THREE from 'three';
import { firestore } from './FirebaseSetup';
import { toggleNodeExpansion, processFirebaseDataToGraph } from './GraphUtilities';
import { createNodeMaterial, focusCameraOnNode, spinGraph } from './ThreeCustomElements';
import { getDocs, collection, QueryDocumentSnapshot } from 'firebase/firestore';
import { GraphData, TopicData, FirestoreData, GraphNode } from './GraphTypes';

interface TopicGraphProps {
    onFetchConversation: (conversation: { formattedText: string; plainText: string; json: any }) => void;
    onNodeClick: (nodeId: string) => void;
}

const TopicGraph: React.FC<TopicGraphProps> = ({ onFetchConversation, onNodeClick }) => {
    const graphRef = useRef<HTMLDivElement>(null);
    const [graphData, setGraphData] = useState<GraphData>({ nodes: [], links: [] });
    const [rawData, setRawData] = useState<FirestoreData>({});
    const isNodeInteracted = useRef(false);

    useEffect(() => {
        const fetchData = async () => {
            const querySnapshot = await getDocs(collection(firestore, "topics1"));
            let fetchedData: FirestoreData = {};

            querySnapshot.forEach((doc: QueryDocumentSnapshot<TopicData>) => {
                const topicId = doc.id;
                const topicData = doc.data();
                fetchedData[topicId] = topicData;
            });

            setGraphData(processFirebaseDataToGraph(fetchedData));
            setRawData(fetchedData);
        };

        fetchData();
    }, []);

    useEffect(() => {
        if (!graphRef.current || graphData.nodes.length === 0) return;

        const graph = ForceGraph3D()(graphRef.current)
            .graphData(graphData)
            .nodeThreeObject(node => {
                const sprite = new THREE.Sprite(createNodeMaterial(node as GraphNode));
                sprite.scale.set(40, 20, 1);
                return sprite;
            })
            .onNodeClick((node: any) => {
                const graphNode = node as GraphNode;
                toggleNodeExpansion(graphNode.id, graphData, setGraphData, rawData);
                isNodeInteracted.current = true;
            });

        const spinInterval = spinGraph(graph, isNodeInteracted);

        const raycaster = new THREE.Raycaster();
        const mouse = new THREE.Vector2();

        const onMouseMove = (event) => {
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;
            raycaster.setFromCamera(mouse, graph.camera());

            const intersects = raycaster.intersectObjects(graph.scene().children);
            if (intersects.length > 0) {
                const intersectedNode = intersects[0].object;
                focusCameraOnNode(graph.camera(), { x: intersectedNode.position.x, y: intersectedNode.position.y, z: intersectedNode.position.z }, 2000, 100);
                isNodeInteracted.current = true;
            } else {
                isNodeInteracted.current = false;
            }
        };

        window.addEventListener('mousemove', onMouseMove);

        return () => {
            clearInterval(spinInterval);
            window.removeEventListener('mousemove', onMouseMove);
        };
    }, [graphData, onFetchConversation, onNodeClick]);

    return <div ref={graphRef} style={{ width: '100%', height: '100%', position: 'absolute' }} />;
};

export default TopicGraph;
