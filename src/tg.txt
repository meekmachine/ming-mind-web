// Link.tsx
// Link.tsx
import React from 'react';
import { Line } from '@react-three/drei';
import { GraphLink, GraphNode } from './utilities/GraphTypes';

interface LinkProps {
    link: GraphLink;
    nodes: GraphNode[];
}

const Link: React.FC<LinkProps> = ({ link, nodes }) => {
    const sourceNode = nodes.find(node => node.id === link.source);
    const targetNode = nodes.find(node => node.id === link.target);

    if (!sourceNode || !targetNode) {
        return null;
    }

    // Cast the positions as tuples
    const sourcePosition: [number, number, number] = [sourceNode.x, sourceNode.y, sourceNode.z];
    const targetPosition: [number, number, number] = [targetNode.x, targetNode.y, targetNode.z];

    return (
        <Line
            points={[sourcePosition as [number, number, number], targetPosition as [number, number, number]]}
            color={link.color}
            // Additional line properties
        />
    );
};

export default Link;
// GraphContainer.tsx
// GraphContainer.tsx
import React, { forwardRef } from 'react';

const GraphContainer = forwardRef<HTMLDivElement, { children: React.ReactNode }>((props, ref) => {
    return <div ref={ref} style={{ width: '100%', height: '600px' }} {...props} />;
});

export default GraphContainer;
// TextMaterial.ts
import { SpriteMaterial, CanvasTexture } from 'three';

export const createTextMaterial = (text: string, isConversationLabel: boolean = false): SpriteMaterial | undefined => {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    if (context) {
        context.font = '48px Lucida Sans';
        context.fillStyle = 'white';
        context.fillText(text, 0, 48);

        const texture = new CanvasTexture(canvas);
        return new SpriteMaterial({ 
            map: texture,
            transparent: true,
            opacity: isConversationLabel ? 1 : 0.6
        });
    }
};
// FirebaseSetup.ts
// FirebaseSetup.ts
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
    apiKey: "AIzaSyDaLUX0xrk1hND1r3PJ1tiAzG80jmKAFYg",
    authDomain: "ming-527ed.firebaseapp.com",
    projectId: "ming-527ed",
    storageBucket: "ming-527ed.appspot.com",
    messagingSenderId: "78727120574",
    appId: "1:78727120574:web:95eed43cc7579dacdf80ef"
};

const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const firestore = getFirestore(app);

export { firestore };
// Camera.ts
import { Camera, Vector3 } from 'three';

export const focusCameraOnNode = (
    camera: Camera, 
    nodePosition: { x: number; y: number; z: number }, 
    duration: number = 2000,
    zoomDistance: number = 100
): void => {
    const startPosition = new Vector3().copy(camera.position);
    const targetPosition = new Vector3(nodePosition.x, nodePosition.y, nodePosition.z + zoomDistance);

    const startTime = Date.now();

    function animateCamera() {
        const elapsedTime = Date.now() - startTime;
        const fraction = elapsedTime / duration;

        if (fraction < 1) {
            camera.position.lerpVectors(startPosition, targetPosition, fraction);
            camera.lookAt(nodePosition.x, nodePosition.y, nodePosition.z);
            requestAnimationFrame(animateCamera);
        } else {
            camera.position.set(targetPosition.x, targetPosition.y, targetPosition.z);
            camera.lookAt(nodePosition.x, nodePosition.y, nodePosition.z);
        }
    }

    animateCamera();
};

export const zoomInCamera = (
    camera: Camera, 
    targetPosition: { x: number; y: number; z: number }, 
    duration: number, 
    onComplete?: () => void
): void => {
    const startPosition = { x: camera.position.x, y: camera.position.y, z: camera.position.z };
    const startTime = Date.now();

    function animateZoom() {
        const elapsedTime = Date.now() - startTime;
        const fraction = elapsedTime / duration;

        if (fraction < 1) {
            camera.position.x = startPosition.x + (targetPosition.x - startPosition.x) * fraction;
            camera.position.y = startPosition.y + (targetPosition.y - startPosition.y) * fraction;
            camera.position.z = startPosition.z + (targetPosition.z - startPosition.z) * fraction;
            requestAnimationFrame(animateZoom);
        } else {
            camera.position.x = targetPosition.x;
            camera.position.y = targetPosition.y;
            camera.position.z = targetPosition.z;

            if (onComplete) {
                onComplete();
            }
        }
    }

    animateZoom();
};

// GraphTypes.ts
// GraphTypes.ts

export interface GraphNode {
    id: string;
    name: string;
    color: string;
    x: number;
    y: number;
    z: number;
}

export interface GraphLink {
    source: string;  // Assuming the source is the id of a GraphNode
    target: string;  // Assuming the target is the id of a GraphNode
    strength: number;
    color: string;
}

export interface GraphData {
    nodes: GraphNode[];
    links: GraphLink[];
}

export interface TopicData {
    [key: string]: number | string | any;
}

export interface FirestoreData {
    [id: string]: TopicData;
}
// DataFetching.ts
// DataFetching.ts
import { firestore } from './FirebaseSetup';
import { collection, getDocs } from 'firebase/firestore';
import { GraphData, GraphNode, GraphLink, FirestoreData } from './GraphTypes';
import { scaleLinear } from 'd3-scale';

// Function to process Firestore data into a format suitable for the graph
export const processFirebaseDataToGraph = (data: FirestoreData): GraphData => {
    let nodes: GraphNode[] = [];
    let links: GraphLink[] = [];

    const toxicityColorScale = scaleLinear<string>()
        .domain([0, 1]) // Assuming toxicity ranges from 0 to 1
        .range(['green', 'red']); // Color range from green (non-toxic) to red (toxic)

    Object.entries(data).forEach(([topicId, topicData]) => {
        if (topicId === '-1') return; // Exclude specific topics if necessary

        const topicName = topicData.topic_name || `Topic ${topicId}`;
        const averageToxicity = topicData.average_toxicity || 0;
        const nodeColor = toxicityColorScale(averageToxicity);

        // Adding placeholder values for x, y, z
        nodes.push({ 
            id: topicId, 
            name: topicName, 
            color: nodeColor,
            x: 0, // Placeholder
            y: 0, // Placeholder
            z: 0  // Placeholder
        });

        // Process links between topics
        Object.entries(topicData).forEach(([key, value]) => {
            if (!isNaN(Number(key)) && key !== '-1' && key !== 'convosations') {
                const targetToxicity = data[key]?.average_toxicity || 0;
                const edgeColor = toxicityColorScale((averageToxicity + targetToxicity) / 2);
        
                const sourceNode = nodes.find(n => n.id === topicId);
                const targetNode = nodes.find(n => n.id === key);
        
                if (sourceNode && targetNode) {
                    links.push({
                        source: sourceNode.id,  // Use the id of the source node
                        target: targetNode.id,  // Use the id of the target node
                        strength: typeof value === 'number' ? value : 0,
                        color: edgeColor
                    });
                }
            }
        });
    });

    // Sort links by strength and keep only the top fraction (e.g., top 20%)
    links.sort((a, b) => b.strength - a.strength);
    links = links.slice(0, Math.ceil(links.length * 0.2));

    return { nodes, links };
};

// Fetch raw data from Firestore and process it into graph format
export const fetchGraphData = async (): Promise<GraphData> => {
    const querySnapshot = await getDocs(collection(firestore, "topics1"));
    let fetchedData: FirestoreData = {};

    querySnapshot.forEach(doc => {
        const topicId = doc.id;
        const topicData = doc.data();
        fetchedData[topicId] = topicData;
    });

    return processFirebaseDataToGraph(fetchedData);
};
// NodeMaterial.ts
// NodeMaterial.ts
import { GraphNode } from './GraphTypes';
import { createTextMaterial } from './TextMaterial';
import { SpriteMaterial } from 'three'; // Ensure that SpriteMaterial is imported from 'three'

export const createNodeMaterial = (node: GraphNode): SpriteMaterial | undefined => {
    // Assuming createTextMaterial's second parameter is a boolean flag and not related to color.
    // You may need to adjust this according to your actual implementation of createTextMaterial.
    const isConversationLabel = true; // Or some logic to determine if it's a conversation label

    return createTextMaterial(node.name, isConversationLabel);
};
// TopicGraph.tsx
// TopicGraph.tsx
import React, { useState, useEffect } from 'react';
import { Canvas } from '@react-three/fiber';
import GraphContainer from './GraphContainer';
import Node from './Node';
import Link from './Link';
import { fetchGraphData, processFirebaseDataToGraph } from './utilities/DataFetching';
import { GraphData } from './utilities/GraphTypes';

interface TopicGraphProps {
    onFetchConversation: (conversation: { formattedText: string; plainText: string; json: any }) => void;
    onNodeClick: (nodeId: string) => void;
}

const TopicGraph: React.FC<TopicGraphProps> = ({ onFetchConversation, onNodeClick }) => {
    const [graphData, setGraphData] = useState<GraphData>({ nodes: [], links: [] });

    useEffect(() => {
        const fetchData = async () => {
            const processedData = await fetchGraphData(); // This should already return GraphData
            setGraphData(processedData);
        };
        fetchData();
    }, []);

    return (
        <GraphContainer>
            <Canvas>
                {graphData.nodes.map(node => (
                    <Node key={node.id} node={node} onNodeClick={onNodeClick} />
                ))}
                {graphData.links.map((link, index) => (
                    <Link key={index} link={link} nodes={graphData.nodes} />
                ))}
            </Canvas>
        </GraphContainer>
    );
};

export default TopicGraph;
// Node.tsx
// Node.tsx
import React, { useRef, useEffect } from 'react';
import { Mesh } from 'three';
import { GraphNode } from './utilities/GraphTypes';
import { useFrame } from '@react-three/fiber';
import { createNodeMaterial } from './utilities/NodeMaterial';

interface NodeProps {
    node: GraphNode;
    onNodeClick: (nodeId: string) => void;
}

const Node: React.FC<NodeProps> = ({ node, onNodeClick }) => {
    const meshRef = useRef<Mesh>(null);

    useEffect(() => {
        if (meshRef.current) {
            const material = createNodeMaterial(node);
            if (material) {
                meshRef.current.material = material;
            }
        }
    }, [node]);

    useFrame(() => {
        // Frame-based logic (if any)
    });

    // Cast the position as a tuple
    const position: [number, number, number] = [node.x || 0, node.y || 0, node.z || 0];

    return (
        <mesh
            ref={meshRef}
            position={position as [number, number, number]}
            onClick={() => onNodeClick(node.id)}
        >
            {/* Mesh geometry and additional properties */}
        </mesh>
    );
};

export default Node;
